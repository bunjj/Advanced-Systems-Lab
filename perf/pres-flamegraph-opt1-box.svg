<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="500" height="254" onload="init(evt)" viewBox="0 0 500 254" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<style type="text/css">
	text { font-family:Verdana; font-size:4px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:9px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 4 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<text id="title" x="250.00" y="8" >Flame Graph</text>
<text id="details" x="10.00" y="245" > </text>
<text id="unzoom" x="10.00" y="8" class="hide">Reset Zoom</text>
<text id="search" x="390.00" y="8" >Search</text>
<text id="ignorecase" x="474.00" y="8" >ic</text>
<text id="matched" x="390.00" y="245" > </text>
<g id="frames">
<g >
<title>shade (3,437 samples, 6.73%)</title><rect x="263.9" y="29" width="32.3" height="15.0" fill="rgb(205,75,18)" rx="2" ry="2" />
<text  x="266.86" y="39.5" >shade</text>
</g>
<g >
<title>render (2,907 samples, 5.69%)</title><rect x="190.2" y="93" width="27.3" height="15.0" fill="rgb(251,76,6)" rx="2" ry="2" />
<text  x="193.18" y="103.5" >render</text>
</g>
<g >
<title>max (1,081 samples, 2.12%)</title><rect x="420.0" y="29" width="10.1" height="15.0" fill="rgb(253,140,25)" rx="2" ry="2" />
<text  x="422.96" y="39.5" >max</text>
</g>
<g >
<title>box_distance (19,887 samples, 38.93%)</title><rect x="263.9" y="61" width="186.8" height="15.0" fill="rgb(223,92,48)" rx="2" ry="2" />
<text  x="266.86" y="71.5" >box_distance</text>
</g>
<g >
<title>main (51,087 samples, 100.00%)</title><rect x="10.0" y="205" width="480.0" height="15.0" fill="rgb(231,173,35)" rx="2" ry="2" />
<text  x="13.00" y="215.5" >main</text>
</g>
<g >
<title>render (1,492 samples, 2.92%)</title><rect x="10.2" y="109" width="14.0" height="15.0" fill="rgb(231,10,25)" rx="2" ry="2" />
<text  x="13.17" y="119.5" >ren..</text>
</g>
<g >
<title>vec_dot (2,372 samples, 4.64%)</title><rect x="132.5" y="45" width="22.3" height="15.0" fill="rgb(225,85,48)" rx="2" ry="2" />
<text  x="135.46" y="55.5" >vec_dot</text>
</g>
<g >
<title>vec_abs (818 samples, 1.60%)</title><rect x="117.6" y="77" width="7.7" height="15.0" fill="rgb(232,1,42)" rx="2" ry="2" />
<text  x="120.57" y="87.5" >v..</text>
</g>
<g >
<title>vec_sub (233 samples, 0.46%)</title><rect x="448.5" y="45" width="2.2" height="15.0" fill="rgb(209,173,27)" rx="2" ry="2" />
<text  x="451.53" y="55.5" ></text>
</g>
<g >
<title>shade (8,348 samples, 16.34%)</title><rect x="299.1" y="45" width="78.4" height="15.0" fill="rgb(211,165,11)" rx="2" ry="2" />
<text  x="302.09" y="55.5" >shade</text>
</g>
<g >
<title>box_distance (15,069 samples, 29.50%)</title><rect x="48.5" y="93" width="141.6" height="15.0" fill="rgb(232,194,9)" rx="2" ry="2" />
<text  x="51.51" y="103.5" >box_distance</text>
</g>
<g >
<title>run (51,081 samples, 99.99%)</title><rect x="10.0" y="141" width="480.0" height="15.0" fill="rgb(245,177,46)" rx="2" ry="2" />
<text  x="13.05" y="151.5" >run</text>
</g>
<g >
<title>shade (4,132 samples, 8.09%)</title><rect x="450.9" y="61" width="38.9" height="15.0" fill="rgb(224,35,21)" rx="2" ry="2" />
<text  x="453.94" y="71.5" >shade</text>
</g>
<g >
<title>__libc_start_main (51,082 samples, 99.99%)</title><rect x="10.0" y="173" width="480.0" height="15.0" fill="rgb(233,46,11)" rx="2" ry="2" />
<text  x="13.04" y="183.5" >__libc_start_main</text>
</g>
<g >
<title>render (4,719 samples, 9.24%)</title><rect x="73.2" y="77" width="44.4" height="15.0" fill="rgb(249,163,8)" rx="2" ry="2" />
<text  x="76.23" y="87.5" >render</text>
</g>
<g >
<title>vec_add (13 samples, 0.03%)</title><rect x="489.9" y="93" width="0.1" height="15.0" fill="rgb(221,46,9)" rx="2" ry="2" />
<text  x="492.86" y="103.5" ></text>
</g>
<g >
<title>vec_dot2 (4,478 samples, 8.77%)</title><rect x="377.9" y="29" width="42.1" height="15.0" fill="rgb(254,9,6)" rx="2" ry="2" />
<text  x="380.89" y="39.5" >vec_dot2</text>
</g>
<g >
<title>render (2,147 samples, 4.20%)</title><rect x="163.9" y="61" width="20.1" height="15.0" fill="rgb(248,10,47)" rx="2" ry="2" />
<text  x="166.87" y="71.5" >render</text>
</g>
<g >
<title>render (51,081 samples, 99.99%)</title><rect x="10.0" y="125" width="480.0" height="15.0" fill="rgb(252,108,8)" rx="2" ry="2" />
<text  x="13.05" y="135.5" >render</text>
</g>
<g >
<title>vec_length (3,139 samples, 6.14%)</title><rect x="125.3" y="77" width="29.5" height="15.0" fill="rgb(243,84,47)" rx="2" ry="2" />
<text  x="128.26" y="87.5" >vec_length</text>
</g>
<g >
<title>vec_dot (2,204 samples, 4.31%)</title><rect x="399.3" y="13" width="20.7" height="15.0" fill="rgb(214,23,15)" rx="2" ry="2" />
<text  x="402.26" y="23.5" >vec_dot</text>
</g>
<g >
<title>sphere_trace_softshadow (26,638 samples, 52.14%)</title><rect x="239.5" y="77" width="250.3" height="15.0" fill="rgb(235,165,41)" rx="2" ry="2" />
<text  x="242.50" y="87.5" >sphere_trace_softshadow</text>
</g>
<g >
<title>vec_dot2 (3,139 samples, 6.14%)</title><rect x="125.3" y="61" width="29.5" height="15.0" fill="rgb(254,86,15)" rx="2" ry="2" />
<text  x="128.26" y="71.5" >vec_dot2</text>
</g>
<g >
<title>vec_abs (39 samples, 0.08%)</title><rect x="377.5" y="45" width="0.4" height="15.0" fill="rgb(243,58,9)" rx="2" ry="2" />
<text  x="380.52" y="55.5" ></text>
</g>
<g >
<title>vec4_dot (312 samples, 0.61%)</title><rect x="296.2" y="29" width="2.9" height="15.0" fill="rgb(212,109,53)" rx="2" ry="2" />
<text  x="299.16" y="39.5" ></text>
</g>
<g >
<title>max (971 samples, 1.90%)</title><rect x="154.8" y="61" width="9.1" height="15.0" fill="rgb(242,174,18)" rx="2" ry="2" />
<text  x="157.75" y="71.5" >max</text>
</g>
<g >
<title>_start (51,086 samples, 100.00%)</title><rect x="10.0" y="189" width="480.0" height="15.0" fill="rgb(210,4,54)" rx="2" ry="2" />
<text  x="13.01" y="199.5" >_start</text>
</g>
<g >
<title>vec_sub (644 samples, 1.26%)</title><rect x="184.0" y="77" width="6.1" height="15.0" fill="rgb(245,128,44)" rx="2" ry="2" />
<text  x="187.05" y="87.5" ></text>
</g>
<g >
<title>plane_distance (15 samples, 0.03%)</title><rect x="450.8" y="61" width="0.1" height="15.0" fill="rgb(244,8,38)" rx="2" ry="2" />
<text  x="453.80" y="71.5" ></text>
</g>
<g >
<title>shade (28,988 samples, 56.74%)</title><rect x="217.5" y="93" width="272.4" height="15.0" fill="rgb(205,90,27)" rx="2" ry="2" />
<text  x="220.50" y="103.5" >shade</text>
</g>
<g >
<title>shade (2,274 samples, 4.45%)</title><rect x="377.9" y="13" width="21.4" height="15.0" fill="rgb(220,104,13)" rx="2" ry="2" />
<text  x="380.89" y="23.5" >shade</text>
</g>
<g >
<title>vec_max (3,040 samples, 5.95%)</title><rect x="420.0" y="45" width="28.5" height="15.0" fill="rgb(205,169,32)" rx="2" ry="2" />
<text  x="422.96" y="55.5" >vec_max</text>
</g>
<g >
<title>vec4_dot (308 samples, 0.60%)</title><rect x="70.3" y="61" width="2.9" height="15.0" fill="rgb(227,75,46)" rx="2" ry="2" />
<text  x="73.34" y="71.5" ></text>
</g>
<g >
<title>shade (1,959 samples, 3.83%)</title><rect x="430.1" y="29" width="18.4" height="15.0" fill="rgb(207,40,22)" rx="2" ry="2" />
<text  x="433.12" y="39.5" >shade</text>
</g>
<g >
<title>sphere_trace (49,575 samples, 97.04%)</title><rect x="24.2" y="109" width="465.8" height="15.0" fill="rgb(254,58,1)" rx="2" ry="2" />
<text  x="27.19" y="119.5" >sphere_trace</text>
</g>
<g >
<title>render (2,323 samples, 4.55%)</title><rect x="48.5" y="61" width="21.8" height="15.0" fill="rgb(243,56,29)" rx="2" ry="2" />
<text  x="51.51" y="71.5" >render</text>
</g>
<g >
<title>main (51,082 samples, 99.99%)</title><rect x="10.0" y="157" width="480.0" height="15.0" fill="rgb(254,13,41)" rx="2" ry="2" />
<text  x="13.04" y="167.5" >main</text>
</g>
<g >
<title>shade (2,308 samples, 4.52%)</title><rect x="217.8" y="77" width="21.7" height="15.0" fill="rgb(214,95,33)" rx="2" ry="2" />
<text  x="220.81" y="87.5" >shade</text>
</g>
<g >
<title>m44_mul_vec (2,631 samples, 5.15%)</title><rect x="48.5" y="77" width="24.7" height="15.0" fill="rgb(245,36,33)" rx="2" ry="2" />
<text  x="51.51" y="87.5" >m44_mul_..</text>
</g>
<g >
<title>m44_mul_vec (3,749 samples, 7.34%)</title><rect x="263.9" y="45" width="35.2" height="15.0" fill="rgb(222,40,51)" rx="2" ry="2" />
<text  x="266.86" y="55.5" >m44_mul_vec</text>
</g>
<g >
<title>all (51,087 samples, 100%)</title><rect x="10.0" y="221" width="480.0" height="15.0" fill="rgb(217,20,48)" rx="2" ry="2" />
<text  x="13.00" y="231.5" ></text>
</g>
<g >
<title>vec_length (4,478 samples, 8.77%)</title><rect x="377.9" y="45" width="42.1" height="15.0" fill="rgb(223,42,26)" rx="2" ry="2" />
<text  x="380.89" y="55.5" >vec_length</text>
</g>
<g >
<title>render (767 samples, 1.50%)</title><rect x="125.3" y="45" width="7.2" height="15.0" fill="rgb(210,17,29)" rx="2" ry="2" />
<text  x="128.26" y="55.5" >r..</text>
</g>
<g >
<title>[libm-2.33.so] (19 samples, 0.04%)</title><rect x="217.6" y="77" width="0.2" height="15.0" fill="rgb(213,199,8)" rx="2" ry="2" />
<text  x="220.61" y="87.5" ></text>
</g>
<g >
<title>vec_max (3,118 samples, 6.10%)</title><rect x="154.8" y="77" width="29.2" height="15.0" fill="rgb(231,121,4)" rx="2" ry="2" />
<text  x="157.75" y="87.5" >vec_max</text>
</g>
</g>
</svg>
